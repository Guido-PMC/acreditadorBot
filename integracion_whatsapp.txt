INTEGRACI√ìN CON ACREDITADORBOT
Sistema para enviar comprobantes de WhatsApp al endpoint de AcreditadorBot

================================================================================
C√ìDIGO COMPLETO PARA INTEGRACI√ìN
================================================================================

// INTEGRACI√ìN CON ACREDITADORBOT
// Sistema para enviar comprobantes de WhatsApp al endpoint de AcreditadorBot

class AcreditadorBotIntegration {
  constructor(baseUrl = 'https://tu-dominio.railway.app') {
    this.baseUrl = baseUrl;
    this.endpoint = `${baseUrl}/api/comprobantes/whatsapp`;
  }

  /**
   * Env√≠a un comprobante de WhatsApp al sistema AcreditadorBot
   * @param {Object} comprobante - Datos del comprobante
   * @param {string} comprobante.numero_telefono - N√∫mero de tel√©fono del remitente
   * @param {string} comprobante.nombre_remitente - Nombre del remitente
   * @param {number} comprobante.importe - Monto del comprobante
   * @param {string} comprobante.fecha_envio - Fecha de env√≠o (ISO 8601)
   * @param {string} [comprobante.texto_mensaje] - Texto del mensaje (opcional)
   * @param {string} [comprobante.archivo_url] - URL del archivo (opcional)
   * @returns {Promise<Object>} Respuesta del servidor
   */
  async enviarComprobante(comprobante) {
    try {
      console.log('üì± Enviando comprobante a AcreditadorBot:', comprobante);

      const response = await fetch(this.endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(comprobante)
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(`Error ${response.status}: ${data.error || data.message}`);
      }

      console.log('‚úÖ Comprobante procesado exitosamente:', data);
      return data;

    } catch (error) {
      console.error('‚ùå Error enviando comprobante:', error);
      throw error;
    }
  }

  /**
   * Procesa m√∫ltiples comprobantes en lote
   * @param {Array} comprobantes - Array de comprobantes
   * @returns {Promise<Array>} Resultados de cada comprobante
   */
  async procesarLote(comprobantes) {
    const resultados = [];
    
    for (const comprobante of comprobantes) {
      try {
        const resultado = await this.enviarComprobante(comprobante);
        resultados.push({
          success: true,
          comprobante: comprobante,
          resultado: resultado
        });
      } catch (error) {
        resultados.push({
          success: false,
          comprobante: comprobante,
          error: error.message
        });
      }
      
      // Pausa entre requests para no sobrecargar el servidor
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    return resultados;
  }
}

// EJEMPLO DE USO
async function ejemploUso() {
  const acreditadorBot = new AcreditadorBotIntegration('https://tu-dominio.railway.app');

  // Ejemplo de comprobante individual
  const comprobante = {
    numero_telefono: "1234567890",
    nombre_remitente: "Juan P√©rez",
    importe: 50000.00,
    fecha_envio: "2025-06-27T10:30:00.000Z",
    texto_mensaje: "Pago realizado por transferencia",
    archivo_url: "https://ejemplo.com/comprobante.jpg"
  };

  try {
    const resultado = await acreditadorBot.enviarComprobante(comprobante);
    
    if (resultado.data.estado === 'cotejado') {
      console.log('üéâ Comprobante cotejado autom√°ticamente!');
    } else {
      console.log('‚è≥ Comprobante pendiente de cotejo manual');
    }
    
  } catch (error) {
    console.error('Error:', error.message);
  }
}

// INTEGRACI√ìN CON SISTEMA EXISTENTE
// Reemplaza esta funci√≥n con tu l√≥gica actual de procesamiento de WhatsApp

async function procesarMensajeWhatsApp(mensaje) {
  // Tu l√≥gica actual de extracci√≥n de datos del mensaje
  const datosExtraidos = extraerDatosComprobante(mensaje);
  
  if (datosExtraidos) {
    const acreditadorBot = new AcreditadorBotIntegration();
    
    try {
      const resultado = await acreditadorBot.enviarComprobante({
        numero_telefono: datosExtraidos.telefono,
        nombre_remitente: datosExtraidos.nombre,
        importe: datosExtraidos.importe,
        fecha_envio: datosExtraidos.fecha,
        texto_mensaje: datosExtraidos.texto,
        archivo_url: datosExtraidos.archivo
      });
      
      // Manejar respuesta seg√∫n el estado
      if (resultado.data.estado === 'cotejado') {
        // Notificar al usuario que el pago fue verificado
        await enviarMensajeConfirmacion(mensaje.chatId, '‚úÖ Pago verificado autom√°ticamente');
      } else {
        // Notificar que est√° pendiente de verificaci√≥n
        await enviarMensajeConfirmacion(mensaje.chatId, '‚è≥ Pago recibido, pendiente de verificaci√≥n');
      }
      
    } catch (error) {
      console.error('Error procesando comprobante:', error);
      await enviarMensajeConfirmacion(mensaje.chatId, '‚ùå Error procesando el comprobante');
    }
  }
}

// FUNCI√ìN DE EXTRACCI√ìN DE DATOS (ADAPTAR A TU SISTEMA)
function extraerDatosComprobante(mensaje) {
  // Implementar seg√∫n tu l√≥gica de extracci√≥n
  // Ejemplo b√°sico:
  return {
    telefono: mensaje.from,
    nombre: mensaje.senderName,
    importe: parseFloat(mensaje.amount),
    fecha: mensaje.timestamp,
    texto: mensaje.text,
    archivo: mensaje.attachmentUrl
  };
}

// CONFIGURACI√ìN
const CONFIG = {
  // URL de tu instancia de AcreditadorBot
  ACREDITADOR_BOT_URL: 'https://tu-dominio.railway.app',
  
  // Configuraci√≥n de reintentos
  MAX_RETRIES: 3,
  RETRY_DELAY: 1000,
  
  // Configuraci√≥n de lotes
  BATCH_SIZE: 10,
  BATCH_DELAY: 500
};

// EXPORTAR PARA USO EN OTROS M√ìDULOS
module.exports = {
  AcreditadorBotIntegration,
  procesarMensajeWhatsApp,
  CONFIG
};

================================================================================
INSTRUCCIONES DE INTEGRACI√ìN
================================================================================

1. CONFIGURACI√ìN INICIAL:
   - Reemplaza 'https://tu-dominio.railway.app' con tu URL real de AcreditadorBot
   - Aseg√∫rate de que tu sistema tenga acceso a internet para hacer las peticiones HTTP

2. INTEGRACI√ìN EN TU SISTEMA EXISTENTE:
   ```javascript
   const { AcreditadorBotIntegration } = require('./acreditadorBotIntegration');
   
   const acreditadorBot = new AcreditadorBotIntegration(ACREDITADOR_BOT_URL);
   
   // Cuando recibas un comprobante
   await acreditadorBot.enviarComprobante({
     numero_telefono: mensaje.from,
     nombre_remitente: mensaje.senderName,
     importe: mensaje.amount,
     fecha_envio: mensaje.timestamp,
     texto_mensaje: mensaje.text,
     archivo_url: mensaje.attachmentUrl
   });
   ```

3. MANEJO DE RESPUESTAS:
   ```javascript
   // Verificar el estado de la respuesta
   if (resultado.data.estado === 'cotejado') {
     // Comprobante vinculado autom√°ticamente
     console.log('‚úÖ Pago verificado autom√°ticamente');
   } else {
     // Pendiente de verificaci√≥n manual
     console.log('‚è≥ Pendiente de verificaci√≥n manual');
   }
   ```

4. MANEJO DE ERRORES:
   ```javascript
   try {
     await acreditadorBot.enviarComprobante(comprobante);
   } catch (error) {
     console.error('Error enviando comprobante:', error.message);
     // Implementar l√≥gica de reintento si es necesario
   }
   ```

================================================================================
FORMATO DE DATOS REQUERIDO
================================================================================

El endpoint espera recibir un JSON con la siguiente estructura:

{
  "numero_telefono": "1234567890",           // REQUERIDO - N√∫mero de tel√©fono
  "nombre_remitente": "Juan P√©rez",          // REQUERIDO - Nombre del remitente
  "importe": 50000.00,                       // REQUERIDO - Monto (n√∫mero)
  "fecha_envio": "2025-06-27T10:30:00.000Z", // REQUERIDO - Fecha ISO 8601
  "texto_mensaje": "Pago realizado",         // OPCIONAL - Texto del mensaje
  "archivo_url": "https://ejemplo.com/img"   // OPCIONAL - URL del archivo
}

================================================================================
RESPUESTA DEL ENDPOINT
================================================================================

Respuesta exitosa:
{
  "success": true,
  "message": "Comprobante procesado exitosamente",
  "data": {
    "comprobante_id": 123,
    "id_comprobante": "WH_1234567890_abc123",
    "cliente": {
      "id": 5,
      "creado": true,
      "nombre": "Juan P√©rez"
    },
    "acreditacion": {
      "id": 45,
      "encontrada": true,
      "cotejado": true
    },
    "estado": "cotejado"
  }
}

Estados posibles:
- "cotejado": Se encontr√≥ y vincul√≥ acreditaci√≥n autom√°ticamente
- "pendiente": No se encontr√≥ acreditaci√≥n coincidente

================================================================================
FUNCIONALIDADES AUTOM√ÅTICAS
================================================================================

1. CREACI√ìN AUTOM√ÅTICA DE CLIENTES:
   - Si el cliente no existe, se crea autom√°ticamente
   - Se busca por n√∫mero de tel√©fono o nombre
   - Se asigna al cliente existente si se encuentra

2. B√öSQUEDA INTELIGENTE DE ACREDITACIONES:
   - Monto exacto
   - Fecha dentro de ¬±24 horas
   - Nombre del titular (b√∫squeda parcial) O CUIT exacto
   - Solo acreditaciones no cotejadas y sin comprobante asignado

3. COTEJO AUTOM√ÅTICO:
   - Si encuentra coincidencia, vincula autom√°ticamente
   - Actualiza el estado de cotejo
   - Registra la fecha de cotejo

4. LOGGING COMPLETO:
   - Registra todas las operaciones
   - Incluye detalles de cliente creado/encontrado
   - Incluye detalles de acreditaci√≥n encontrada/no encontrada

================================================================================
EJEMPLOS DE USO PR√ÅCTICO
================================================================================

Ejemplo 1 - Comprobante con cotejo autom√°tico:
```javascript
const comprobante = {
  numero_telefono: "1234567890",
  nombre_remitente: "Mar√≠a Gonz√°lez",
  importe: 75000.00,
  fecha_envio: "2025-06-27T14:30:00.000Z",
  texto_mensaje: "Transferencia realizada"
};

const resultado = await acreditadorBot.enviarComprobante(comprobante);
// Resultado: estado = "cotejado" (si encuentra acreditaci√≥n coincidente)
```

Ejemplo 2 - Comprobante sin cotejo autom√°tico:
```javascript
const comprobante = {
  numero_telefono: "9876543210",
  nombre_remitente: "Carlos L√≥pez",
  importe: 25000.00,
  fecha_envio: "2025-06-27T16:45:00.000Z"
};

const resultado = await acreditadorBot.enviarComprobante(comprobante);
// Resultado: estado = "pendiente" (si no encuentra acreditaci√≥n coincidente)
```

Ejemplo 3 - Procesamiento en lote:
```javascript
const comprobantes = [
  { numero_telefono: "1111111111", nombre_remitente: "Ana", importe: 10000, fecha_envio: "2025-06-27T10:00:00.000Z" },
  { numero_telefono: "2222222222", nombre_remitente: "Pedro", importe: 20000, fecha_envio: "2025-06-27T11:00:00.000Z" },
  { numero_telefono: "3333333333", nombre_remitente: "Laura", importe: 30000, fecha_envio: "2025-06-27T12:00:00.000Z" }
];

const resultados = await acreditadorBot.procesarLote(comprobantes);
// Procesa todos los comprobantes y devuelve resultados individuales
```

================================================================================
MANEJO DE ERRORES
================================================================================

Errores comunes y c√≥mo manejarlos:

1. ERROR DE CONECTIVIDAD:
   ```javascript
   try {
     await acreditadorBot.enviarComprobante(comprobante);
   } catch (error) {
     if (error.message.includes('fetch')) {
       console.log('Error de conectividad, reintentando...');
       // Implementar l√≥gica de reintento
     }
   }
   ```

2. ERROR DE VALIDACI√ìN:
   ```javascript
   // El servidor devuelve error 400 si los datos son inv√°lidos
   if (error.message.includes('400')) {
     console.log('Datos del comprobante inv√°lidos');
     // Revisar formato de datos
   }
   ```

3. ERROR DEL SERVIDOR:
   ```javascript
   // El servidor devuelve error 500 si hay problema interno
   if (error.message.includes('500')) {
     console.log('Error interno del servidor');
     // Implementar l√≥gica de reintento con delay
   }
   ```

================================================================================
CONFIGURACI√ìN AVANZADA
================================================================================

Para configuraciones m√°s avanzadas, puedes modificar la clase:

```javascript
class AcreditadorBotIntegration {
  constructor(baseUrl, options = {}) {
    this.baseUrl = baseUrl;
    this.endpoint = `${baseUrl}/api/comprobantes/whatsapp`;
    this.options = {
      timeout: options.timeout || 30000,
      retries: options.retries || 3,
      retryDelay: options.retryDelay || 1000,
      ...options
    };
  }

  async enviarComprobanteConReintento(comprobante) {
    let lastError;
    
    for (let i = 0; i < this.options.retries; i++) {
      try {
        return await this.enviarComprobante(comprobante);
      } catch (error) {
        lastError = error;
        if (i < this.options.retries - 1) {
          await new Promise(resolve => setTimeout(resolve, this.options.retryDelay));
        }
      }
    }
    
    throw lastError;
  }
}
```

================================================================================
NOTAS IMPORTANTES
================================================================================

1. SEGURIDAD:
   - El endpoint no requiere autenticaci√≥n por defecto
   - Considera implementar autenticaci√≥n si es necesario
   - Usa HTTPS para todas las comunicaciones

2. RENDIMIENTO:
   - No env√≠es m√°s de 10 comprobantes por segundo
   - Implementa delays entre requests si procesas muchos
   - Usa el m√©todo procesarLote() para m√∫ltiples comprobantes

3. MONITOREO:
   - Revisa los logs del servidor AcreditadorBot
   - Monitorea las respuestas de tu sistema
   - Implementa alertas para errores frecuentes

4. MANTENIMIENTO:
   - Actualiza la URL del servidor si cambia
   - Revisa peri√≥dicamente el estado de la integraci√≥n
   - Mant√©n backups de los datos importantes

================================================================================
CONTACTO Y SOPORTE
================================================================================

Para soporte t√©cnico o consultas sobre la integraci√≥n:
- Revisa los logs del servidor AcreditadorBot
- Verifica la conectividad de red
- Confirma que la URL del endpoint sea correcta
- Valida el formato de los datos enviados

================================================================================
FIN DEL DOCUMENTO
================================================================================ 